# Installs the August Cumulative Update for Windows 10, 11, Srv16, Srv19, and Srv22 operating systems.

# Get OS version
if((Get-ComputerInfo | Select OSName) -Match "Windows Server"){
    
    # Get Windows version and build info
    $WindowsVersion = (([String](Get-ComputerInfo | Select OsName)).Split(" ")[1..3] -Join " " )
}
    
else{
    
    # Get Windows version and build info
    $WinVerBuildInfo = (([String](Get-ComputerInfo | Select OsName)).Split(" ")[1..2] -Join " " ) + " " + (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion" | Select DisplayVersion).DisplayVersion

    # Store Windows version in variable
    $WindowsVersion = (($WinVerBuildInfo).Split(" ")[0..1]) -Join " "

    # Store build info in variable.
    $BuildInfo = ($WinVerBuildInfo).Split(" ")[-1]
}

Write-Output $WindowsVersion

# Set execution policy for the current session
Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force

# Install NuGet provider
Install-PackageProvider -Name NuGet -Force | Out-Null

# Import NuGet provider
Import-PackageProvider -Name NuGet

# Update the install policy status of the PSGallery PSRepository
Set-PSRepository -Name PSGallery -InstallationPolicy Trusted

# Install the PSWindowsUpdate module
Install-Module -Name PSWindowsUpdate -Force -WarningAction Ignore

# Import the PSWindowsUpdate module
Import-Module -Name PSWindowsUpdate

if($WindowsVersion -EQ "Windows 10"){

    # Check if update is already installed.
    Write-Host "Verifying if the IPv6 patch for $WindowsVersion is already installed..." -ForegroundColor Yellow
    
    if((Get-WindowsUpdate -KBArticleID "KB5041580" -IsInstalled).Status -Match "I"){
    
        Write-Host "KB5041580 is already installed.  Script will exit in 5 seconds." -ForegroundColor Green

        Start-Sleep -Seconds 5

        exit
    }

    # Install update if not already installed.
    else{
    
        Write-Host "Attempting to install the IPv6 patch for $WindowsVersion..." -ForegroundColor Yellow
        
        Get-WindowsUpdate -KBArticleID "KB5041580" -Download -Install -Confirm:$False -IgnoreReboot

        # Check if update successfully installed.
        if((Get-WindowsUpdate -KBArticleID "KB5041580" -IsInstalled).Status -Match "I"){
    
            Write-Host "KB5041580 successfully installed.  Script will exit in 5 seconds." -ForegroundColor Green

            Start-Sleep -Seconds 5

            exit
        }

        else{
        
            Write-Error -Message "KB5041580 failed to install.  Script will exit in 5 seconds."

            Start-Sleep -Seconds 5

            exit
        }
    }
}

elseif($WindowsVersion -EQ "Windows 11"){
   
    # Check if update is already installed.
    Write-Host "Verifying if the IPv6 patch for $WindowsVersion is already installed..." -ForegroundColor Yellow
    
    if((Get-WindowsUpdate -KBArticleID "KB5041585" -IsInstalled).Status -Match "I"){
    
        Write-Host "KB5041585 is already installed.  Script will exit in 5 seconds." -ForegroundColor Green

        Start-Sleep -Seconds 5

        exit
    }

    # Install update if not already installed.
    else{
    
        Write-Host "Attempting to install the IPv6 patch for $WindowsVersion..." -ForegroundColor Yellow
        
        Get-WindowsUpdate -KBArticleID "KB5041585" -Download -Install -Confirm:$False -IgnoreReboot

        # Check if update successfully installed.
        if((Get-WindowsUpdate -KBArticleID "KB5041585" -IsInstalled).Status -Match "I"){
    
            Write-Host "KB5041585 successfully installed.  Script will exit in 5 seconds." -ForegroundColor Green

            Start-Sleep -Seconds 5

            exit
        }

        else{
        
            Write-Error -Message "KB5041585 failed to install.  Script will exit in 5 seconds."

            Start-Sleep -Seconds 5

            exit
        }
    }
}

elseif($WindowsVersion -EQ "Windows Server 2016"){

    Get-WindowsUpdate -KBArticleID "KB5041773" -Download -Install -Confirm:$False -IgnoreReboot
}

elseif($WindowsVersion -EQ "Windows Server 2019"){

    Get-WindowsUpdate -KBArticleID "KB5043050" -Download -Install -Confirm:$False -IgnoreReboot
}

elseif($WindowsVersion -EQ "Windows Server 2022"){

    Get-WindowsUpdate -KBArticleID "KB5042881" -Download -Install -Confirm:$False -IgnoreReboot
}

else{

    Write-Output "Windows version not detected as Windows 10, 11, Server 2022, Server 2019, or Server 2016.  Script will exit in 5 seconds."

    Start-Sleep -Seconds 5

    exit
}
